export default [{"index":"第 1 章","title":"为什么说每个程序员都要尽早地学习并掌握设计模式相关知识？","path":"contents/1.html"},{"index":"第 2 章","title":"从哪些维度评判代码质量的好坏？如何具备写出高质量代码的能力？","path":"contents/2.html"},{"index":"第 3 章","title":"面向对象、设计原则、设计模式、编程规范、重构，这五者有何关系？","path":"contents/3.html"},{"index":"第 4 章","title":"理论一：当谈论面向对象的时候，我们到底在谈论什么？","path":"contents/4.html"},{"index":"第 5 章","title":"理论二：封装、抽象、继承、多态分别可以解决哪些编程问题？","path":"contents/5.html"},{"index":"第 6 章","title":"理论三：面向对象相比面向过程有哪些优势？面向过程真的过时了吗？","path":"contents/6.html"},{"index":"第 7 章","title":"理论四：哪些代码设计看似是面向对象，实际是面向过程的？","path":"contents/7.html"},{"index":"第 8 章","title":"理论五：接口vs抽象类的区别？如何用普通的类模拟抽象类和接口？","path":"contents/8.html"},{"index":"第 9 章","title":"理论六：为什么基于接口而非实现编程？有必要为每个类都定义接口吗？","path":"contents/9.html"},{"index":"第 100 章","title":"如何将设计思想、原则、模式等理论知识应用到项目中？","path":"contents/100.html"},{"index":"第 10 章","title":"理论七：为何说要多用组合少用继承？如何决定该用组合还是继承？","path":"contents/10.html"},{"index":"第 11 章","title":"实战一（上）：业务开发常用的基于贫血模型的MVC架构违背OOP吗？","path":"contents/11.html"},{"index":"第 12 章","title":"实战一（下）：如何利用基于充血模型的DDD开发一个虚拟钱包系统？","path":"contents/12.html"},{"index":"第 13 章","title":"实战二（上）：如何对接口鉴权这样一个功能开发做面向对象分析？","path":"contents/13.html"},{"index":"第 14 章","title":"实战二（下）：如何利用面向对象设计和编程开发接口鉴权功能？","path":"contents/14.html"},{"index":"第 15 章","title":"理论一：对于单一职责原则，如何判定某个类的职责是否够“单一”？","path":"contents/15.html"},{"index":"第 16 章","title":"理论二：如何做到“对扩展开放、修改关闭”？扩展和修改各指什么？","path":"contents/16.html"},{"index":"第 17 章","title":"理论三：里式替换（LSP）跟多态有何区别？哪些代码违背了LSP？","path":"contents/17.html"},{"index":"第 18 章","title":"理论四：接口隔离原则有哪三种应用？原则中的“接口”该如何理解？","path":"contents/18.html"},{"index":"第 19 章","title":"理论五：控制反转、依赖反转、依赖注入，这三者有何区别和联系？","path":"contents/19.html"},{"index":"第 20 章","title":"理论六：我为何说KISS、YAGNI原则看似简单，却经常被用错？","path":"contents/20.html"},{"index":"第 21 章","title":"理论七：重复的代码就一定违背DRY吗？如何提高代码的复用性？","path":"contents/21.html"},{"index":"第 22 章","title":"理论八：如何用迪米特法则（LOD）实现“高内聚、松耦合”？","path":"contents/22.html"},{"index":"第 23 章","title":"实战一（上）：针对业务系统的开发，如何做需求分析和设计？","path":"contents/23.html"},{"index":"第 24 章","title":"实战一（下）：如何实现一个遵从设计原则的积分兑换系统？","path":"contents/24.html"},{"index":"第 25 章","title":"实战二（上）：针对非业务的通用框架开发，如何做需求分析和设计？","path":"contents/25.html"},{"index":"第 26 章","title":"实战二（下）：如何实现一个支持各种统计规则的性能计数器？","path":"contents/26.html"},{"index":"第 27 章","title":"理论一：什么情况下要重构？到底重构什么？又该如何重构？","path":"contents/27.html"},{"index":"第 28 章","title":"理论二：为了保证重构不出错，有哪些非常能落地的技术手段？","path":"contents/28.html"},{"index":"第 29 章","title":"理论三：什么是代码的可测试性？如何写出可测试性好的代码？","path":"contents/29.html"},{"index":"第 30 章","title":"理论四：如何通过封装、抽象、模块化、中间层等解耦代码？","path":"contents/30.html"},{"index":"第 31 章","title":"理论五：让你最快速地改善代码质量的20条编程规范（上）","path":"contents/31.html"},{"index":"第 32 章","title":"理论五：让你最快速地改善代码质量的20条编程规范（中）","path":"contents/32.html"},{"index":"第 33 章","title":"理论五：让你最快速地改善代码质量的20条编程规范（下）","path":"contents/33.html"},{"index":"第 34 章","title":"实战一（上）：通过一段ID生成器代码，学习如何发现代码质量问题","path":"contents/34.html"},{"index":"第 35 章","title":"实战一（下）：手把手带你将ID生成器代码从“能用”重构为“好用”","path":"contents/35.html"},{"index":"第 36 章","title":"实战二（上）：程序出错该返回啥？NULL、异常、错误码、空对象？","path":"contents/36.html"},{"index":"第 37 章","title":"实战二（下）：重构ID生成器项目中各函数的异常处理代码","path":"contents/37.html"},{"index":"第 38 章","title":"总结回顾面向对象、设计原则、编程规范、重构技巧等知识点","path":"contents/38.html"},{"index":"第 39 章","title":"运用学过的设计原则和思想完善之前讲的性能计数器项目（上）","path":"contents/39.html"},{"index":"第 40 章","title":"运用学过的设计原则和思想完善之前讲的性能计数器项目（下）","path":"contents/40.html"},{"index":"第 41 章","title":"单例模式（上）：为什么说支持懒加载的双重检测不比饿汉式更优？","path":"contents/41.html"},{"index":"第 42 章","title":"单例模式（中）：我为什么不推荐使用单例模式？又有何替代方案？","path":"contents/42.html"},{"index":"第 43 章","title":"单例模式（下）：如何设计实现一个集群环境下的分布式单例模式？","path":"contents/43.html"},{"index":"第 44 章","title":"工厂模式（上）：我为什么说没事不要随便用工厂模式创建对象？","path":"contents/44.html"},{"index":"第 45 章","title":"工厂模式（下）：如何设计实现一个DependencyInjection框架？","path":"contents/45.html"},{"index":"第 46 章","title":"建造者模式：详解构造函数、set方法、建造者模式三种对象创建方式","path":"contents/46.html"},{"index":"第 47 章","title":"原型模式：如何最快速地clone一个HashMap散列表？","path":"contents/47.html"},{"index":"第 48 章","title":"代理模式：代理在RPC、缓存、监控等场景中的应用","path":"contents/48.html"},{"index":"第 49 章","title":"桥接模式：如何实现支持不同类型和渠道的消息推送系统？","path":"contents/49.html"},{"index":"第 50 章","title":"装饰器模式：通过剖析JavaIO类库源码学习装饰器模式","path":"contents/50.html"},{"index":"第 51 章","title":"适配器模式：代理、适配器、桥接、装饰，这四个模式有何区别？","path":"contents/51.html"},{"index":"第 52 章","title":"门面模式：如何设计合理的接口粒度以兼顾接口的易用性和通用性？","path":"contents/52.html"},{"index":"第 53 章","title":"组合模式：如何设计实现支持递归遍历的文件系统目录树结构？","path":"contents/53.html"},{"index":"第 54 章","title":"享元模式（上）：如何利用享元模式优化文本编辑器的内存占用？","path":"contents/54.html"},{"index":"第 55 章","title":"享元模式（下）：剖析享元模式在JavaInteger、String中的应用","path":"contents/55.html"},{"index":"第 56 章","title":"观察者模式（上）：详解各种应用场景下观察者模式的不同实现方式","path":"contents/56.html"},{"index":"第 57 章","title":"观察者模式（下）：如何实现一个异步非阻塞的EventBus框架？","path":"contents/57.html"},{"index":"第 58 章","title":"模板模式（上）：剖析模板模式在JDK、Servlet、JUnit等中的应用","path":"contents/58.html"},{"index":"第 59 章","title":"模板模式（下）：模板模式与Callback回调函数有何区别和联系？","path":"contents/59.html"},{"index":"第 60 章","title":"策略模式（上）：如何避免冗长的if-else-switch分支判断代码？","path":"contents/60.html"},{"index":"第 61 章","title":"策略模式（下）：如何实现一个支持给不同大小文件排序的小程序？","path":"contents/61.html"},{"index":"第 62 章","title":"职责链模式（上）：如何实现可灵活扩展算法的敏感信息过滤框架？","path":"contents/62.html"},{"index":"第 63 章","title":"职责链模式（下）：框架中常用的过滤器、拦截器是如何实现的？","path":"contents/63.html"},{"index":"第 64 章","title":"状态模式：游戏、工作流引擎中常用的状态机是如何实现的？","path":"contents/64.html"},{"index":"第 65 章","title":"迭代器模式（上）：相比直接遍历集合数据，使用迭代器有哪些优势？","path":"contents/65.html"},{"index":"第 66 章","title":"迭代器模式（中）：遍历集合的同时，为什么不能增删集合元素？","path":"contents/66.html"},{"index":"第 67 章","title":"迭代器模式（下）：如何设计实现一个支持“快照”功能的iterator？","path":"contents/67.html"},{"index":"第 68 章","title":"访问者模式（上）：手把手带你还原访问者模式诞生的思维过程","path":"contents/68.html"},{"index":"第 69 章","title":"访问者模式（下）：为什么支持双分派的语言不需要访问者模式？","path":"contents/69.html"},{"index":"第 70 章","title":"备忘录模式：对于大对象的备份和恢复，如何优化内存和时间的消耗？","path":"contents/70.html"},{"index":"第 71 章","title":"命令模式：如何利用命令模式实现一个手游后端架构？","path":"contents/71.html"},{"index":"第 72 章","title":"解释器模式：如何设计实现一个自定义接口告警规则功能？","path":"contents/72.html"},{"index":"第 73 章","title":"中介模式：什么时候用中介模式？什么时候用观察者模式？","path":"contents/73.html"},{"index":"第 74 章","title":"总结回顾23种经典设计模式的原理、背后的思想、应用场景等","path":"contents/74.html"},{"index":"第 75 章","title":"在实际的项目开发中，如何避免过度设计？又如何避免设计不足？","path":"contents/75.html"},{"index":"第 76 章","title":"开源实战一（上）：通过剖析JavaJDK源码学习灵活应用设计模式","path":"contents/76.html"},{"index":"第 77 章","title":"开源实战一（下）：通过剖析JavaJDK源码学习灵活应用设计模式","path":"contents/77.html"},{"index":"第 78 章","title":"开源实战二（上）：从Unix开源开发学习应对大型复杂项目开发","path":"contents/78.html"},{"index":"第 79 章","title":"开源实战二（中）：从Unix开源开发学习应对大型复杂项目开发","path":"contents/79.html"},{"index":"第 80 章","title":"开源实战二（下）：从Unix开源开发学习应对大型复杂项目开发","path":"contents/80.html"},{"index":"第 81 章","title":"开源实战三（上）：借GoogleGuava学习发现和开发通用功能模块","path":"contents/81.html"},{"index":"第 82 章","title":"开源实战三（中）：剖析GoogleGuava中用到的几种设计模式","path":"contents/82.html"},{"index":"第 83 章","title":"开源实战三（下）：借GoogleGuava学习三大编程范式中的函数式编程","path":"contents/83.html"},{"index":"第 84 章","title":"开源实战四（上）：剖析Spring框架中蕴含的经典设计思想或原则","path":"contents/84.html"},{"index":"第 85 章","title":"开源实战四（中）：剖析Spring框架中用来支持扩展的两种设计模式","path":"contents/85.html"},{"index":"第 86 章","title":"开源实战四（下）：总结Spring框架用到的11种设计模式","path":"contents/86.html"},{"index":"第 87 章","title":"开源实战五（上）：MyBatis如何权衡易用性、性能和灵活性？","path":"contents/87.html"},{"index":"第 88 章","title":"开源实战五（中）：如何利用职责链与代理模式实现MyBatisPlugin？","path":"contents/88.html"},{"index":"第 89 章","title":"开源实战五（下）：总结MyBatis框架中用到的10种设计模式","path":"contents/89.html"},{"index":"第 90 章","title":"项目实战一：设计实现一个支持各种算法的限流框架（分析）","path":"contents/90.html"},{"index":"第 91 章","title":"项目实战一：设计实现一个支持各种算法的限流框架（设计）","path":"contents/91.html"},{"index":"第 92 章","title":"项目实战一：设计实现一个支持各种算法的限流框架（实现）","path":"contents/92.html"},{"index":"第 93 章","title":"项目实战二：设计实现一个通用的接口幂等框架（分析）","path":"contents/93.html"},{"index":"第 94 章","title":"项目实战二：设计实现一个通用的接口幂等框架（设计）","path":"contents/94.html"},{"index":"第 95 章","title":"项目实战二：设计实现一个通用的接口幂等框架（实现）","path":"contents/95.html"},{"index":"第 96 章","title":"项目实战三：设计实现一个支持自定义规则的灰度发布组件（分析）","path":"contents/96.html"},{"index":"第 97 章","title":"项目实战三：设计实现一个支持自定义规则的灰度发布组件（设计）","path":"contents/97.html"},{"index":"第 98 章","title":"项目实战三：设计实现一个支持自定义规则的灰度发布组件（实现）","path":"contents/98.html"},{"index":"第 99 章","title":"总结回顾：在实际软件开发中常用的设计思想、原则和模式","path":"contents/99.html"},{"index":"加餐一","title":"用一篇文章带你了解专栏中用到的所有Java语法","path":"contents/32591852.html"},{"index":"加餐七","title":"基础学科的知识如何转化成实际的技术生产力？","path":"contents/62032865.html"},{"index":"加餐三","title":"聊一聊Google是如何做CodeReview的","path":"contents/5138787.html"},{"index":"加餐九","title":"作为面试官或候选人，如何面试或回答设计模式问题？","path":"contents/48650874.html"},{"index":"加餐二","title":"设计模式、重构、编程规范等相关书籍推荐","path":"contents/74809729.html"},{"index":"加餐五","title":"听一听小争哥对Google工程师文化的解读","path":"contents/40211001.html"},{"index":"加餐八","title":"程序员怎么才能让自己走得更高、更远？","path":"contents/4526183.html"},{"index":"加餐六","title":"什么才是所谓的编程能力？如何考察一个人的编程能力？","path":"contents/22850139.html"},{"index":"加餐十","title":"如何接手一坨烂业务代码？如何在烂业务代码中成长？","path":"contents/86119772.html"},{"index":"加餐四","title":"聊一聊Google那些让我快速成长的地方","path":"contents/12937656.html"},{"index":"开篇词","title":"一对一的设计与编码集训，让你告别没有成长的烂代码！","path":"contents/14636417.html"},{"index":"春节特别加餐","title":"王争：如何学习《设计模式之美》专栏？","path":"contents/23974807.html"},{"index":"结束语","title":"聊一聊机遇、方向、能力、努力！","path":"contents/48651256.html"}]